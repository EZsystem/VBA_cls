VBAコード冒頭への記載ルールは以下の通りにしてください。
記入順番が優先順位となります。

'────────────────────────────────────────────
１．モジュール名説明書き
・モジュール名を囲う
・新規作成時は「更新日」を「-」とする

■ クラスモジュールの場合：
'=====================================
' Class Module: cls_モジュール名
' 説明　：○○を目的としたクラス
' 作成日：2025/04/25
' 更新日：-
'=====================================

■ 標準モジュールの場合：
'-------------------------------------
' Module: mod_モジュール名
' 説明　：○○処理の共通関数群
' 作成日：2025/04/25
' 更新日：-
'-------------------------------------

■ フォームモジュールの場合（必要時）：
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Form Module: frm_フォーム名
' 説明　：フォームイベント処理用
' 作成日：2025/04/25
' 更新日：-
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


２．Option宣言
・モジュール名説明の直下に記載する

Option Compare Database
Option Explicit


３．変数宣言ブロック
・Option宣言の下に記載する
・公開用プロパティ／内部変数で分けて記述

' --- 外部公開用プロパティ ---
Public Property Get Something() As Type

' --- 内部保持変数 ---
Private pSomething As Type


４．処理ブロックの開始ルール
・Public Sub または Public Function を基本とする
・必要に応じて Private や Friend も可とする
・各処理ブロックの先頭に説明コメントを記載すること
・コメントは下記のフォーマットに従う

'=================================================
' 関数名 : GetColIndex
' 説明   : 列名から列番号を取得する
' 引数   : colName（String）
' 戻り値 : 列番号（Long）
'=================================================
Public Function GetColIndex(colName As String) As Long
    ' ...
End Function

'=================================================
' 処理名 : ClearTable
' 説明   : 指定されたテーブルをすべてクリアする
' 引数   : なし
'=================================================
Private Sub ClearTable()
    ' ...
End Sub

■ おまけ推奨（Optional）：
処理ブロックが長い場合、目的ごとに区切ると見やすくなる

' --- 1. 初期化 ---
' --- 2. 条件判定 ---
' --- 3. 実行処理 ---
' --- 4. 結果の出力 ---


５．関数・Subの終了ルール（推奨）
・関数やSubの終了行にコメントをつけると見失いにくい

End Function   ' ← 関数の終わり
End Sub        ' ← Subの終わり


６．コメントの文体ルール

| 項目           | ルール                                     | 例                            |
|----------------|--------------------------------------------|-------------------------------|
| 言語           | 日本語で統一                               | 英語コメントを避ける         |
| 語尾           | 「です・ます」調を使わない（常体）         | ○「値を取得する」            |
| 終わり方       | 句点（。）を付けない                       | ×「〜します。」→ ○「〜する」|
| 区切り         | コロン（:）＋全角スペースで整える          | 「引数 : 値（Integer）」     |
| 改行           | 長文を避け、1〜2行で簡潔に記述する         | 必要なら改行で補足する       |

■ コメント強調例：
' ※注意：この処理は初期化前に呼び出してはいけない
' ！警告：Nullが渡されるとエラーになる可能性あり


７．命名規則（Naming Convention）

| 要素           | 命名スタイル            | 例                          | 補足                          |
|----------------|--------------------------|-----------------------------|-------------------------------|
| 変数           | 小文字＋キャメルケース   | itemCount / userName        | 意味のある名前に              |
| プロパティ     | パスカルケース           | StartDate / IsValid         | 外部公開に適した見た目       |
| プライベート変数| 接頭辞「p」＋キャメル    | pDB / pErrors               | 内部変数と分けやすい          |
| 引数           | 短く簡潔＋キャメルケース | rowIndex / targetCol        | 意味を省略しない              |
| 関数/Sub名     | 動詞＋目的               | LoadData / ClearTable       | 何をするかを明確にするにゃ！ |

■ その他命名ルール：
- ブール型： `Is`, `Has`, `Can` で始める（例：IsValid, HasValue）
- コレクション：複数形にする（例：users, errors）


８．コードのインデント・改行ルール

| 項目                 | 内容                             | 補足                                           |
|----------------------|----------------------------------|------------------------------------------------|
| インデント           | 半角スペース4個が基本            | Tabキーはズレやすいので非推奨にゃ             |
| ネスト（入れ子）     | ネストごとに4スペース追加        | If文やFor文など                               |
| 改行位置             | ブロックごとに1行空ける          | 処理のかたまりや説明のあとに空行を入れる     |
| コメントとコードの間 | 1行空けると読みやすくなる         | コメント → 改行 → コード がベスト            |

■ 改行の補足：
1行が長いときは `_`（アンダースコア）で折り返すにゃ！

If x = 1 And y = 2 And z = 3 Then _
    Call DoSomething()
