【VBA命名ルールブック：標準モジュール & プロシージャ】

作成日：2025年5月
作成者：小田島家の猫・そうじろう（そうちゃん）

──────────────────────────────
■ 共通の命名ルール（すべてのVBAコード対象）

1．アプリケーション種別のプレフィックスをつける

* acc\_：Access用
* xl\_ ：Excel用
* com\_：共通ユーティリティ用

例：

* acc\_clsExcelImporter
* xl\_modWorkbookManager
* com\_modStringHelper

2．モジュール種別のプレフィックスをつける

* cls：クラスモジュール
* mod：標準モジュール
* frm：フォームモジュール
* rpt：レポートモジュール

3．区切りはスネークケース（\_）を使う
例：mod\_IcubeImport\_PreProcess

4．単語の連結には camelCase（キャメルケース）を使う
例：Import\_LoadFromExcel、Process\_CalculateRate

5．命名構成の優先順位
a. 名詞（処理対象やオブジェクト）
b. 動詞（処理の内容やアクション）

6．命名は英語で統一し、日本語は使用しない

──────────────────────────────
■ 基本命名構成（Import処理を例に）

命名要素は以下の3つを組み合わせて構成する：

* 対象：データやテーブル名（例：Icube）
* 目的：処理カテゴリ（例：Import, Export, Process）
* 処理フェーズ：段階・工程（例：RawLoad, PreProcess, Commit）

──────────────────────────────
■ 標準モジュール名の命名ルール

形式：
mod\_【対象】【目的】\_【処理フェーズ】

例：

* mod\_IcubeImport\_RawLoad        → Icubeテーブルへの仮格納処理
* mod\_IcubeImport\_PreProcess     → クレンジング・初期補正処理
* mod\_IcubeImport\_Commit         → 正規テーブルへの登録処理

目的（分類）に使用する語句：

* Import：データの取込（外部 → DB）
* Export：データの出力（DB → 外部）
* Process：DB内での加工・分析・整形

処理フェーズ（段階）に使用する語句：

* RawLoad：仮格納、一次取込
* PreProcess：整形、検査、変換
* Commit：本番テーブルへの登録

──────────────────────────────
■ プロシージャ名（関数・Sub）の命名ルール

形式：
【目的】*【動作内容】\[*【対象や元データ】]

例（Import目的）：

* Import\_LoadFromExcel(path As String)
* Import\_LoadFromCsv(path As String)
* Import\_ValidateHeaders()
* Import\_CleanseData()
* Import\_CheckDuplicates()
* Import\_CommitToIcube()
* Import\_LogResult()

補足：

* Prefixに "Import\_" をつけることで、どの処理目的かが明確になる
* 目的に応じて "Export\_", "Process\_" 等に置き換え可

──────────────────────────────
■ コメント形式（プロシージャ冒頭）

'=================================================
' 処理名 : Import\_LoadFromExcel
' 説明   : Excelファイルを読み込んで仮テーブルへ格納する
' 引数   : path（ファイルパス）
'=================================================
Public Sub Import\_LoadFromExcel(path As String)

──────────────────────────────
■ 処理ブロックのセクションコメントルール

1つのモジュール内に複数の処理目的（例：Import + Export）が含まれる場合は、
セクションコメントで処理グループを明示的に分けること。

形式：
' ----------------------------
' 【目的】処理群
' ----------------------------

例：
' ----------------------------
' Import処理群
' ----------------------------
Public Sub Import\_LoadFromExcel()
Public Sub Import\_CleanseData()

' ----------------------------
' Export処理群
' ----------------------------
Public Sub Export\_WriteToCsv()
Public Sub Export\_WriteToExcel()

目的や対象単位でセクションを作成し、関数が「どのカテゴリに属するか」が一目で分かるようにする。

──────────────────────────────
■ 処理目的 × 動作内容 命名パターン表

| 分類        | 処理目的（prefix） | 動作内容（suffix）例                                 | 想定されるプロシージャ名例                                                             | 用途概要                  |
| --------- | ------------ | --------------------------------------------- | ------------------------------------------------------------------------- | --------------------- |
| Import    | Import\_     | LoadFromExcel, ValidateHeaders, CommitToIcube | Import\_LoadFromExcel<br>Import\_ValidateHeaders<br>Import\_CommitToIcube | 外部データの取り込み処理          |
| Export    | Export\_     | WriteToCsv, WriteToExcel, GeneratePdf         | Export\_WriteToCsv<br>Export\_GeneratePdf                                 | データの外部出力処理（CSV, PDF等） |
| Process   | Process\_    | CalculateMargin, ApplyDiscount, Aggregate     | Process\_CalculateMargin<br>Process\_ApplyDiscount                        | DB内でのデータ加工・整形処理       |
| FormEvent | （ボタン名等）      | LoadInit, OnClick, AfterUpdate                | Form\_LoadInit<br>btnExecute\_Click                                       | フォーム制御・イベントトリガー処理     |

──────────────────────────────
■ NG命名・禁止ワード一覧（避けること）

| 区分    | NG命名例              | 理由・補足説明                        |
| ----- | ------------------ | ------------------------------ |
| 曖昧な名前 | Test1, Tmp, Main   | 処理内容や対象が分からず、可読性・保守性が低下するにゃ    |
| 汎用過ぎる | DoIt, Run, Exec    | 実際の動作が読み取れず、誤用されやすいにゃ          |
| 日本語命名 | 読込, 削除処理, 検索ボタン    | 多国語対応やチーム開発時の統一性を保つため英語で統一するにゃ |
| 接頭辞なし | clsHelper, modData | モジュール種別や目的が見えない命名は避けるにゃ        |

──────────────────────────────
■ 命名・構造に関する補足スタイルルール

| 項目       | スタイル例・ルール説明                                                                 |
| -------- | --------------------------------------------------------------------------- |
| セクション装飾  | `'====================`（関数・Sub）<br>`'--------------------`（目的グループ）などで統一感を出す |
| モジュール内順序 | 初期化 → 検証 → 実行 → 出力 など、論理的な順番に記述する                                           |
| コメント文体   | 日本語常体、句点なし、「引数 : 値」の形式、簡潔で1〜2行が基本                                           |
| 処理分割の推奨  | 200行以上 or 複数機能が混在する場合はモジュールを分割する                                            |
| 英語命名の一貫性 | 目的語・動作語を英語で統一、動詞+名詞の形で整える（例：LoadData）                                       |

──────────────────────────────
（完）
